1073
1050
1032
1030
1015
975
945
846
820
805
800
785
732
650
600
537
532
500
450
436
402
400
150
data
data
data
data
data = scan()
data
data
data
data1
data
hist(data
hist(data)
hist(data)
hist(d2)
boxplot(d2)
boxploat(data)
boxplot(data)
us=c(250,255,255,264,234,265,245,276,269,222,234,263,265,237,254,234,226)
uk=c(260,271,258,263,267,251,255,250,243,240,254,275,250,225,222,230,225)
canada=c(222,250,230,240,257,222,245,254,268,252,256,212,243,256,235,221,241)
brezil=c(222,255,265,257,222,267,247,253,251,252,236,264,230,236,212,243,232)
china=c(247,249,255,243,244,245,249,266,223,266,228,278,265,223,232,234,234)
us
uk
canada
brezil
china
fb=matrix(c(us,uk,canada,brezil,china),nrow=17,ncol=5,dimnames=list(c("r1","r2","r3","r4","r5","r6","r7","r8","r9","r10","r11","r12","r13","r14","r15","r16","r17"),c("us","uk","canada","brezil","china")))
fb
fb1=matrix(c(us,uk,canada,brezil,china),nrow=17,ncol=5,dimnames=list(c(1:17),c("us","uk","canada","brezil","china")))
fb1
fb2=matrix(c(us,uk,canada,brezil,china),nrow=17,ncol=5,byrow=TRUE)
fb2
fb3=cbind(us,uk,canada,brezil,china)
fb3
fb4=rbind(us,uk,canada,brezil,china)
fb4
class(fb)
dim(fb)
length(fb)
head(fb)
head(fb,n=10)
head(fb,n=20)
fb[15,]
fb[,4]
tail(fb)
tail(fb, n=5)
tail(fb, n=10)
fb[15,]
fb[c(3,14),]
fb[c(10:14),]
fb[,c(3:5)]
fb1=t(fb)
fb1
fb1[1:5,]
fb1[1:3,]
fb1[c(1:5),c(1:5)
fb1[c(1:5),c(1:5)]
fb1[c(1:5),c(1:5)]
stem(us)
stem(uk)
stem(us)
stem(uk)
stem(canada)
stem(brezil)
stem(china)
stem(fb)
min(fb)
max(fb)
min(us)
max(us)
iris
head(iris)
tail(iris)
str(iris)
fix(iris)
R
R
mystring <- "Hello,World!"
print(mystring)
v <-TRUE
print(class(v))
v <- 23.5
print(class(v))
v <- 23.5
print(class(v))
v <- 5
print(class(v))
v <- 999
print(class(v))
v <- 2L
print(class(v))
v <- 3+5i
print(class(v))
v <- "Obul"
print(class(v))
v <- "TRUE"
print(class(v))
v <- 'a'
print(class(v))
v <- '23.4'
print(class(v))
v <- charTORaw("Hello")
print(class(v))
v <- charToRaw("Hello")
print(class(v))
apple <- c('red','green',"yellow")
print(apple)
apple <- c('red','green',"yellow")
print(apple)
print(class(apple))
list1 <- list(c(2,5,3),21.3,sin)
print(list1)
list1 <- list(c(2,5,3),21.3,sin)
print(list1)
print(class(list1))
M=matrix(c('a','a','b','c','b','a'), nrows=2, ncol=3,byrow =TRUE)
M=matrix(c('a','a','b','c','b','a'), nrow=2, ncol=3,byrow =TRUE)
M=matrix(c('a','a','b','c','b','a'), nrow=2, ncol=3,byrow =TRUE)
print(M)
a <- array(c('green','yellow'),dim=c(3,3,2))
print(a)
#create a vector
apple_colors <- c('green','green','yellow','red','red','red','green')
##create a factor object
factor_apple <- factor(apple_colors)
##print the factors
print(factor_apple)
print(nlevels(factor_apple))
apple_colors <- c('green','green','yellow','red','red','red','green')
apple_colors
factor_apple <- factor(apple_colors)
##print the factors
print(factor_apple)
print(nlevels(factor_apple)
print(nlevels(factor_apple))
print(factor_apple)
print(nlevels(factor_apple))
BMI <- data.frame(
gender = c("Male","Male","Female")
height = c(152,171.5,165)
weight = c(81,93,78)
age    = c(42,38,26)
)
print(BMI)
BMI <- data.frame(
gender = c("Male","Male","Female")
height = c(152,171.5,165)
weight = c(81,93,78)
age    = c(42,38,26)
)
print(BMI)
BMI <- data.frame{
gender = c("Male","Male","Female")
height = c(152,171.5,165)
weight = c(81,93,78)
age    = c(42,38,26)
}
print(BMI)
BMI <- data.frame(
gender = c("Male","Male","Female")
height = c(152,171.5,165)
weight = c(81,93,78)
age    = c(42,38,26)
)
BMI <- data.frame(
gender = c("Male","Male","Female")
height = c(152,171.5,165)
weight = c(81,93,78)
age    = c(42,38,26))
print(BMI)
BMI <- data.frame(
gender = c("Male","Male","Female"),
height = c(152,171.5,165),
weight = c(81,93,78),
age    = c(42,38,26))
print(BMI)
print(class(gender))
print(class(height))
print(class(weight))
print(class(weight)
print(class(weight))
print(class(age))
var.1 = c(0,1,2,3)
var.1
var.2 <- c("learn","R")
var.2
c(TRUE,1) -> var.3
var.3
#Assign using equal operator
var.1 = c(0,1,2,3)
#Assign using leftward operator
var.2 <- c("learn","R")
#Assign using rightward operator
c(TRUE,1) -> var.3
print(var.1)
cat("var.1 is", var.1,"\n")
cat("var.2 is", var.2,"\n")
cat("var.3 is",var.3,"\n")
print(var.1)
cat("var.1 is", var.1,"\n")
cat("var.2 is", var.2,"\n")
cat("var.3 is",var.3,"\n")
print(var.1)
cat("var.1 is", var.1,"\n")
cat("var.2 is", var.2,"\n")
cat("var.3 is",var.3,"\n")
var_x <- "Hello"
Cat("The class of var_x is",class(var_x),"\n")
var_x <- 34.5
cat("The class of var_x is",class(var_x),"\n")
var_x <- 27L
cat(" Next class of var_x becomes",class(var_x),"\n")
var_x <- "Hello"
Cat("The class of var_x is",class(var_x),"\n")
var_x <- "Hello"
cat("The class of var_x is",class(var_x),"\n")
var_x <- 34.5
cat("The class of var_x is",class(var_x),"\n")
var_x <- 27L
cat(" Next class of var_x becomes",class(var_x),"\n")
print(ls)
print(ls())
print(ls(pattern="var"))
print(ls(pattern="a"))
print(ls(pattern="a"))
print(ls(all.name=TRUE))
print(ls(all.names=TRUE))
var.3
library("Rcmdr", lib.loc="~/R/win-library/3.5")
detach("package:RcmdrMisc", unload=TRUE)
sales= read.CSV(file.choose(),)
sales= read.csv(file.choose(),)
str(sales)
sales= read.csv(file.choose(),)
sales
str(sales)
sales= read.csv(file.choose(),)
sales
str(sales)
Model1 = lm(Netsales~AdvExp, data=sales)
Model1
summary(Model1)
predict(Model1)
residuals(Model1)
save.image("G:\\My\\30.06\\.RData")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
rattle()
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
rattle()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
rattle()
rattle()
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
rattle()
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
rattle()
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
rattle()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
iris
data(iris)
data
iris
data(iris)
str(iris)
str(iris)
table(iris$Species)
head(iris)
iris
set.seed(9850)
runif(5)
gp <- runif(nrow(iris))
gp
iris <- iris[order(gp),]
iris
str(iris)
runif(5)
head(iris)
head(iris,10)
str(iris)
summary(iris[,c(1,2,3,4)])
normalize <- function(x) {
return((x--min(x)) /(max(x)-min(x))}
normalize
normalize <- function(x) {
+return((x--min(x)) /(max(x)-min(x))}
normalize
normalize <- function(x) {return((x--min(x)) /(max(x)-min(x))}
normalize <- function(x) {return((x--min(x)) /(max(x)-min(x))}
normalize <- function(x) {
return((x--min(x)) /(max(x)-min(x))}
normalize <- function(x) {
+ return((x--min(x)) /(max(x)-min(x))}
normalize <- function(x) {
+ return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x) {
return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x)
return((x-min(x)) /(max(x)-min(x))}
return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x) {
return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x) {
+ return((x - min(x) ) /( max(x) -min(x))}
normalize <- function(x) {
return((x - min(x) ) /( max(x) -min(x))}
normalize <- function(X){
+ return((X min(X ) /( max(X -min(X)}
normalize <- function(X){
+ return((X min(X) /( max(X)-min(X)}
normalize <- function(X){
+ return((X min(X) /( max(X)-min(X)) }
normalize <- function(X) {
+  return((X-min(X)/( max(X)-min(X))}
normalize <- function(X) {
return((X-min(X)/( max(X)-min(X))}
summary(iris[,c(1,2,3,4)])
normalize <- function(x) {
return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x) {
return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x) {
return((X-min(x)) /(max(x)-min(x))}
normalize <- function(x) {
return((X-min(X)) /(max(X)-min(X))}
normalize <- function(x)
{
return((X-min(X)) /(max(X)-min(X))
}
normalize <- function(x) {return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x) {return((x-min(x)) /(max(x)-min(x))}
normalize
normalize <- function(x) {
+ return((x-min(x)) /(max(x)-min(x))}
str(iris)
normalize <- function(x)
+ return((x-min(x)) /(max(x)-min(x))}
normalize <- function(x) {
return((x-min(x)) / (max(x)-min(x)))
}
normalize
normalize(c(1,2,3,4,5))
normalize(c(102,3,4,5))
normalize(c(10,20,30,40,50))
iris_n <- as.data.frame(lapply(iris[,c[1,2,3,4)],normalize))
iris_n <- as.data.frame(lapply(iris[,c(1,2,3,4)],normalize))
str(iris_n)
summary(iris_n)
data(iris)
str(iris)
table(iris$Species)
head(iris)
iris
### there are 50 setosa in row and than 50 versiclor and 5o virginica
in a row, its well organised but for R purpouses thats going to create
some Problems.So i want to mix up the rows in entire data set###
set.seed(9850)
##Random result for everytime.##
## create a variable##
runif(5)
## displayed 5 random numbers b/n 0 &5 ##
## runif --it produces the random number from the uniform distibution ##
## I need 150 random number because there are 150 rows in data set##
gp <- runif(nrow(iris))
## my data frame is iris and its well organised but i want to mixed up the rows for KNN##
iris <- iris[order(gp),]
str(iris)
head(iris)
head(iris,10)
## Now we have good mixure##
## Now want to rescale the Numaric for KNN##
str(iris)
## In my data set all are numaric and KNN is very good in dealing with Numaric##
summary(iris[,c(1,2,3,4)])
## There is the larger difference in min and max. so the features with larger values generally
end up having un do influnce on the prediction or classification process because KNN uses the distance function
for every feauture we use here to be scalled in similar pashion. one way to do is normalisation
and other way is standardized using z-scores.##
normalize <- function(x) {
return((x-min(x)) / (max(x)-min(x)))
}
normalize(c(1,2,3,4,5))
normalize(c(10,20,30,40,50))
## Now We have to apply the normalized function on sepal lenghth width and petal lenghth and width before we apply the KNN algorithm ####
## To do this we want to create new data frame in the process and dont want to overwrite the Data frame ###
iris_n <- as.data.frame(lapply(iris[,c(1,2,3,4)],normalize))
## pply on iris data including (,)rows and c(columns) and normalize the data.
str(iris_n)
summary(iris_n)
q()
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
?abs
abs(-5.6)
"my"+"apples"
hieghts <- c("medium", "short", "short", "tall", "medium", "medium")
factor_hieghts <- factor(hieghts)
factor_hieghts
factor_hieghts[1] <- "Ultra-short"     #This will not work
factor_hieghts
summary(factor_hieghts)
# say we create a numeric vector to store values of a die roll:
dice <- c(1, 2, 4, 5, 5, 3, 2, 6, 3, 5, 6, 2, 1, 4, 3, 6, 5, 3, 2, 2, 5)
#We can convert the vector into 6 factor levels.
dice_levels  <-  factor(dice)
dice_levels
summary(dice_levels)
5*5/5
5*5/2
5/5*2
myvector<-c(2,3,5,6)
myvector1<-c("d","f")
myvector+myvector1
myvector2<-c("j","h")
myvector2+myvector1
ls()
rm(list=ls())
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
C(z,555,z)
c(z, 555, z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)
c(1,2,3,4)+C(0,10)
c(1, 2, 3, 4)+C(0, 10)
c(1, 2, 3, 4)+ C(0, 10)
c(1, 2, 3, 4) + C(0, 10)
c(1,2,3,4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
exit()
bye()
load("G:\\My\\18.07 PCA ,FA,DR,STEEL Project\\PCA_DimensionalRed_Speeddating.RData")
load("G:\\My\\18.07 PCA ,FA,DR,STEEL Project\\CancerPred_DR_PCA_Factor Analysis.RData")
q()
getwd()
q()
getwd()
setwd("F:/UDEMY/R-Udamy_Workspace")
getwd()
setwd("F:/UDEMY/R Workspace_ML")
getwd()
dataset = read.delim("Restaurant_Reviews.tsv" ,quote = '', stringsAsFactors = FALSE)
View(dataset)
dataset
# Cleaning texts
install.packages('tm')
library(tm)
Corpus = VCorpus(VectorSource(dataset$Review))
